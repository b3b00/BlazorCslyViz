@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@using Microsoft.JSInterop

<div>
    <strong>@Title</strong>

    <p class="title">Visualization  for CSLY with Viz.js </p>
   
    
    <div>
        <div class="input" style="display: flex; flex-direction: row;flex-wrap: nowrap">
            <textarea style="flex-grow: 1" id="grammarBox" maxlength="2000" spellcheck="false" @bind="grammar" />
            <textarea style="flex-grow: 1" id="inputBox" maxlength="2000" spellcheck="false" @bind="expression" />
        </div>
        <button id="submitButton" @onclick="Render">
            Render
        </button>
    </div>
    

    <div id="graph" >
        <div id="output">
            <div id="error"></div>
          </div>
    </div>

</div>

@code {

    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public string? Title { get; set; }

    private string expression;

    private string grammar;

    private string dot;

    protected override async void OnInitialized()
    {
        expression = @"

WHILE i < 10 DO
(
   i = i + 1
   print ""hello""
)";

        grammar = @"
genericLexer WhileLexer;

[String] STRING;
[Int] INT;
[AlphaId] ID; 


[ KeyWord] IF:""if"";
[ KeyWord] THEN:""then"";
[ KeyWord] ELSE:""else"";
[ KeyWord] WHILE:""while"";
[ KeyWord] DO:""do"";
[ KeyWord] SKIP:""skip"";
[ KeyWord] TRUE:""true"";
[ KeyWord] FALSE:""false"";
[ KeyWord] NOT:""not"";
[ KeyWord] AND:""and"";
[ KeyWord] OR:""or"";
[ KeyWord] PRINT:""print"";

 [Sugar] GREATER : "">"";

[Sugar] LESSER : ""<"";

[Sugar] EQUALS : ""=="";

[Sugar] DIFFERENT : ""!="";

[Sugar] CONCAT : ""."";

[Sugar] ASSIGN : "":="";

[Sugar] PLUS : ""+"";
[Sugar] MINUS : ""-"";
[Sugar] TIMES : ""*"";
[Sugar] DIVIDE : ""/"";

[Sugar] LPAREN : ""("";
[Sugar] RPAREN : "")"";
[Sugar] SEMICOLON : "";"";

parser WhileParser;


[Right 50] LESSER;
[Right 50] GREATER;
[Right 50] EQUALS;
[Right 50]DIFFERENT;

[Right 10] CONCAT;
       
[Right 10] PLUS;
[Left 10] MINUS;
[Right 50] TIMES;
[Left 50]DIVIDE;

[Prefix 100] MINUS;

[Right 10] OR;
[Right 50] AND;
[Prefix 100] NOT;


-> statement :  LPAREN statement RPAREN ;


statement : sequence;


[Operand] operand : [INT | TRUE | FALSE | STRING | ID];
[Operand] operand : LPAREN WhileParser_expressions RPAREN;

sequence : statementPrim additionalStatements*;

additionalStatements : SEMICOLON statementPrim;

statementPrim: IF WhileParser_expressions THEN statement ELSE statement;

statementPrim: WHILE WhileParser_expressions DO statement;

statementPrim: ID ASSIGN WhileParser_expressions;

statementPrim: SKIP;

statementPrim: PRINT WhileParser_expressions;

";

    }


    private async void Render()
    {
        var dotresult = CslyProcessor.GetDot(grammar, expression);
        if (dotresult.IsOK)
        {
            dot = dotresult.Result;
            await VizRender(dot);
        }
        else
        {
            foreach (var error in dotresult.Errors)
            {
                AppendError(error);
            }
        }
    }

    public async Task VizRender(string graph) 
    {
        await JSRuntime.InvokeAsync<string>("vizRender",graph);     
    }

    public async Task AppendError(string errorMessage) 
    {
        await JSRuntime.InvokeAsync<string>("appendError", errorMessage);     
    }
}
