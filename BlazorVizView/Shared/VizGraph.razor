@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@using Microsoft.JSInterop

<div>
    <strong>@Title</strong>

    <p class="title">Visualization  for C#, Blazor interop wrapper for Viz.js </p>
    <p class="para">Viz.js, Emscripten version of Graphviz: <a href="https://github.com/mdaines/viz.js" target="_blank">https://github.com/mdaines/viz.js</a></p>
    <p class="para">svg-pan-zoom.js, pan/zoom for HTML SVG: <a href="https://github.com/ariutta/svg-pan-zoom" target="_blank">https://github.com/ariutta/svg-pan-zoom</a></p>
    <p class="para">Demo is visualization of C# Syntax, used Roslyn CSharpSyntaxWalker to generate Graphviz DOT language file </p>
    <p class="title">Expression to process: </p>
    <div class="input">
        <textarea id="inputBox" maxlength="2000" spellcheck="false" @bind="expression" />
        <button id="submitButton" @onclick="Render">
            Render
        </button>
    </div>
    

    <div id="graph">
        <div id="output">
            <div id="error"></div>
          </div>
    </div>

</div>

@code {

    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public string? Title { get; set; }

    private string expression;

    private string grammar;

    private string dot;
    protected override async void OnInitialized()
    {
        expression = "-58 * 2 /9 +(2 +2!) ";

        grammar = @"
genericLexer SimpleExpressionToken;

[Double] DOUBLE;
[Int] INT;

[Sugar] PLUS : ""+"";
[Sugar] INCREMENT : ""++"";
[Sugar] MINUS : ""-"";
[Sugar] TIMES : ""*"";
[Sugar] DIVIDE : ""/"";
[Sugar] LPAREN : ""("";
[Sugar] RPAREN : "")"";
[Sugar] FACTORIAL : ""!"";
[AlphaNumId] ID;

parser SimpleExpressionParser;

[Right 10] PLUS;
[Left 10] MINUS;
[Right 50] TIMES;
[Left 50] DIVIDE;
[Prefix 100] MINUS;
[Postfix 100] FACTORIAL;
[Operand] operand : primary_value;
primary_value : DOUBLE;
primary_value : INT;
primary_value : ID;
primary_value : LPAREN SimpleExpressionParser_expressions RPAREN;
-> root : SimpleExpressionParser_expressions;
";

    }


    private async void Render()
    {
        var dotresult = CslyProcessor.GetDot(grammar, expression);
        if (dotresult.IsOK)
        {
            dot = dotresult.Result;
            await VizRender(dot);
        }
    }

    public async Task VizRender(string graph) 
    {
        await JSRuntime.InvokeAsync<string>("vizRender",graph);     
    }

    public async Task AppendError(string errorMessage) 
    {
        await JSRuntime.InvokeAsync<string>("appendError", errorMessage);     
    }
}
